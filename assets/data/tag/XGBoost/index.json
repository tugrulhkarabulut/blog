{"hash":"45d11bbc980e47f955eeb702a8ebfd0286f9f2e4","data":{"tag":{"title":"XGBoost","belongsTo":{"edges":[{"node":{"title":"Tree Based Methods in Machine Learning - Gradient Boosting and XGBoost","path":"/tree-based-methods-in-machine-learning-gradient-boosting-and-xg-boost/","date":"3. October 2020","timeToRead":16,"description":"Mathematical explanation of Gradient Boosting algorithm and brief explanation of XGBoost system.","content":"<h2 id=\"gradient-boosting\"><a href=\"#gradient-boosting\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Gradient Boosting</h2>\n<p>In a general supervised machine learning setting, we often want to find\nan estimate $F(\\mathbf{x})$, that produces a value $y^*$ as the\nprediction to the ground truth $y$. To find the optimal $F$, we find the\nfunction that minimizes the expected value of some pre-determined loss\nfunction.</p>\n<p>$$\nF^* = \\underset{F}{\\operatorname{argmin}} \\ E_{Y | x}[L(y, F(\\mathbf{x}))] \\tag{14}\n$$</p>\n<p>Instead of looking at all possible functions, we usually narrow our\nfunction space down to a family of parameterized functions\n$F(\\mathbf{x}; \\mathbf{P})$ where $\\mathbf{P}$ is a set of parameters that defines the model.</p>\n<p>Now, the problems reduces to finding the parameters, $P^*$, that\nminimizes the expected loss.</p>\n<p>$$\\begin{aligned}\n\\mathbf{P^*} &#x26;= \\underset{\\mathbf{P}}{\\operatorname{argmin}} \\ E_{Y | x}[L(y, F(\\mathbf{x}; \\mathbf{P}))] \\\\\\\n&#x26;= \\underset{\\mathbf{P}}{\\operatorname{argmin}} \\ \\mathbf{\\Phi(\\mathbf{P})}\n\\end{aligned}$$</p>\n<p>And we denote our estimated function as\n$F^* = F(\\mathbf{x};\\mathbf{P^*})$</p>\n<h3 id=\"numerical-optimization-on-additive-models\"><a href=\"#numerical-optimization-on-additive-models\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Numerical Optimization on Additive Models</h3>\n<p>Now, we restrict our attention to additive models. We define our\nadditive as following:</p>\n<p>$$\nF(\\mathbf{x}; { \\ \\beta_m, \\mathbf{a}_m \\ }_{m=1}^M)\n= \\sum \\limits_{m=1}^{M} \\beta_m h(\\mathbf{x}; \\mathbf{a}_m) \\tag{15}\n$$</p>\n<p>So, the $\\mathbf{P}$ corresponds to the parameter set\n${ \\ \\beta_m, \\mathbf{a}_m \\ }_{m=1}^M$ and\n$h(\\mathbf{x}; \\mathbf{a})$ is a simple model obtained by a weak\nlearner. We will be using small regression trees as our weak learners.\nIn that case, the parameters, $\\mathbf{a}_m$, corresponds to split\nvariables, split points and predictions at leaf (mean, median, etc. for\nregression trees). And the parameter $\\beta_m$ is the weight of the weak\nlearner.</p>\n<p>If we make an analogy to gradient descent, in which we make an update\nwith a function's steepest direction to find the point where it is\nminimum:</p>\n<p>$$x \\gets x - \\alpha * f^ \\prime (x)$$</p>\n<p>where $\\alpha$ is the learning data.</p>\n<p>Or if we want to find the parameters of a function where it attains its\nminimum value, we make updates using a cost function\n$J(\\mathbf{\\theta})$:</p>\n<p>$$\\theta_i \\gets \\theta_i - \\alpha \\frac{\\partial J(\\mathbf{\\theta})}{\\partial \\theta_i}$$</p>\n<p>With the same logic, in Gradient Boosting, we make updates to our\nadditive model:</p>\n<p>$$F_{m}(\\mathbf{x}) = F_{m-1}(\\mathbf{x}) + F_m(\\mathbf{x})$$</p>\n<p>where $f_m(\\mathbf{x}) = -\\rho_m g_m(\\mathbf{x})$ and</p>\n<p>$$g_m(\\mathbf{x}) = \\left[\n\\frac{\\partial E_y[L(y, F(\\mathbf{x}) | \\mathbf{x}]}{\\partial F(\\mathbf{x})}\n\\right]_{F(\\mathbf{x}) = F_{m-1}(\\mathbf{x})}$$</p>\n<p>and the final solution will be:</p>\n<p>$$F^*(\\mathbf{x}) = \\sum \\limits_{m=0}^{M} f_m(\\mathbf{x})$$</p>\n<p>where $f_0(x)$ is the initial guess.</p>\n<p>We also find the optimum $\\rho_m$ as:</p>\n<p>$$\\rho_m = \\underset{\\rho}{\\operatorname{argmin}} \\ E_{y, \\mathbf{x}} L(y, F_{m-1}(\\mathbf{x}) - \\rho g_m(\\mathbf{x}))$$</p>\n<h3 id=\"training\"><a href=\"#training\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Training</h3>\n<p>This method cannot be directly applied when we have limited data because\nwe cannot calculate the expected loss directly. In this case, we make\nuse of the training set that we have.</p>\n<p>We will use the parameterized additive model in (15) and minimize\nexpected loss estimated from the training set:</p>\n<p>$$\n{ \\ \\beta_m, \\mathbf{a}_m \\ } = \\underset{\\beta^\\prime_m, \\mathbf{a}^\\prime_m}{\\operatorname{argmin}} \\ \\sum \\limits_{i=1}^{N} L  \\left( y_i, \\sum \\limits_{m=0}^{M} \\beta^\\prime_m h(\\mathbf{x}_i; \\mathbf{a}^\\prime_m) \\right)\n$$</p>\n<p>It's often hard to find all the parameters at one step. Instead of this,\nwe use an iterative approach.</p>\n<p>$$\n{ \\  \\beta_m, \\mathbf{a}_m \\ } = \\underset{\\beta^\\prime_m, \\mathbf{a}^\\prime_m}{\\operatorname{argmin}} \\ \\sum \\limits_{i=1}^{N} L  \\left( y_i, F_{m-1}(\\mathbf{x}_i) + \\beta^\\prime_m h(\\mathbf{x}_i; \\mathbf{a}^\\prime_m) \\right)\n$$</p>\n<p>then we make update:</p>\n<p>$$\nF_m(\\mathbf{x}) = F_{m-1}(\\mathbf{x}) + \\beta_m h(\\mathbf{x}; \\mathbf{a}_m)\n$$</p>\n<p>If you recall, this is the Forward Stagewise Additive Modelling\ntechnique that we talked about in the previous section.</p>\n<p>In the case where we have finite data, $g_m$, the gradients are\ncalculated for the training data instances ${ \\mathbf{x}_i }_{i=1}^N$:</p>\n<p>$$\ng_m(\\mathbf{x}_i) = \\left[\n\\frac{\\partial L(y, F(\\mathbf{x}_i) }{\\partial F(\\mathbf{x}_i)}\n\\right]_{F(\\mathbf{x}) = F_{m-1}(\\mathbf{x})}\n$$</p>\n<p>But we cannot calculate the gradients directly for new data points other\nthan the ones in the training set. And even if for training set, if we\nuse the gradients directly, the model would not be well generalized.\nTherefore, we need our model to learn a mapping from training data\npoints to gradients in order to generalize to unseen data. To do that,\nwe use a parameterized function and that is the\n$h(\\mathbf{x}; \\mathbf{a})$, as we mentioned and learn its parameters,\n$\\mathbf{a}$, as given below:</p>\n<p>$$\n{ \\ \\mathbf{a}_m \\ } =  \\underset{\\mathbf{a}}\n{\\operatorname{argmin}} \\ \\sum \\limits_{i=1}^N (-g_m(\\mathbf{x}_i) - \\beta h(\\mathbf{x}_i; \\mathbf{a} )) \\tag{16}\n$$</p>\n<p>So, we fit the negative gradients, $-g_m$, to the parameterized model\n$h(\\mathbf{x}; \\mathbf{a})$ to learn a mapping from the obversations to\nits gradients. Negative gradients are also called \\\"pseudo-responses\\\",\nin the sense that, we try to learn a mapping to them even though they\nare not the real response values. And they are also called\n\\\"pseudo-residuals\\\" as well.</p>\n<p>Therefore, we have a general algorithm that we will work for any\ndifferentible loss function. At each stage of the algorithm we learn a\nmapping from data points to gradients. This is analogous to the standard\napplications of gradient descent in machine learning where the\nparameters of a function is learned.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 717 358' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-ba04fe72a786f3f519bbde7e6e21b39c'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-ba04fe72a786f3f519bbde7e6e21b39c)' width='717' height='358' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAIAAAAt/%2bnTAAAACXBIWXMAAAsSAAALEgHS3X78AAAEp0lEQVRYw83Y11IbSxAGYL3/u8CFLghFgRC5yDlnAzIIDnDI%2bXzaxnvWQrYvrNRVLD2zM7v99/wdVrnX19ebm5vb29t/Ewk9rldXV2aur68p1z8kZmIy1sQkof/TLLm4uHh%2bfv74%2bMj5KxQKAwMDCwsLy8vL09PT/f39xWJxcnLy4OBgbGxsfX19c3PTcGdnZ35%2bfmZmZnt728zq6qqVe3t7W1tb5g0tOD8/bxqAl5eXCoC3tzev7%2b3t7ezsBGM0EZZ1dHQwbnFxkWXlcnllZWVubg6M2dlZUA1PTk6Gh4dXEjE5MTFh48PDgwe%2bNkXe398rAB4fHwHYSuTo6KhUKnH8SSIMPT09BeMgEbe%2bJ1JK5Pj42F3L0vnDw8NvzRLvYvknAP4eHBzM5/NdXV3Oobu7m9GMw6j9/X3X8fHxy8tLqwN0W0ku/jmRp6cnDL67u6OgFybAhm1YIVxwTpgGhlSqntUSeBUAcg6jWfwbs3Z3d7EFsPv7%2b3Q%2bwqj1JyA0Iy4FIjBnZ2coJC6npqbcGhoaEgBra2tYZB6jJCKpMxjfcl7lvJ77MURSRxhONUQbQyYCQzGMdIlUEApfAGJZW5wA8tS8B0wUCxGCP5JpOwaxqJWCsEIe5GZWogqinyYi06uvKoC7yNPT08Pxf0mb%2bnohx8fsRnFIEIb16IEq7JaUVFxDiivmLC0twdYOsfsThTiVxXgSpSE8BBg8kXzEhisAMinFaQTxUl%2bGkiYxV9tdPZAiijw8XSne6hg8FQCcCoOCqiQ7AczxArZS1Gbs6uvrcxTc76BkHgeSZUI2%2bYYSqcz2qNn6EVsgeUhEfrOgXlyqAOCnqFasTx9qMgxlsTSqUdPDWcOXUDkZQ4otshNz3TKkR6ynqLKti0OrO/0%2bAaTlKXVMVOKsk5xJMOExEaajFkXwCBguECfokX1Uk2KgCkBNYR8uYXNVPvlKAxh%2blZcbBYBxTlZoIqt3s4BHo/vHe5MbGxsIrbHDEwUbT4LNQsIHg6FJ56CQ021swQlEiWUoNjsNxgkAQx8D6G4SKubijFwkJCLP2FJOBDa3zEcwtJ5CQQxGc6fToLOS6VLKH4tUVUZqdK/6E4CaqT2GbqkAEcTZW9mEUzMkmnoCYV98DGDCUyICl%2b4ctBKWyUXWRzYUGOnRoZPJKIhBMKQSGIaehpOR%2bxsVxN6H9Gkh826xq5EeS8SXPnL7ugdGvOK6bzQEA4lOib0mZQLbDW23y4z1WpVisSii0npc/xOIRMRhkSiDCSZZE28FCYAobY4lEj/d%2buir48Qo4f74QrKX7smUBvXe/wOILiVeHxU3SGKSAhsMSlW2lAY3qrJ%2bC7JQ9EK8q0uRZxADeaIXMvSx5hYG6xRkVVfzkhIdYeJrzhXOQqEgn4r1mqHcwCyUjbNoFREjQpmAZzJoQ48ItiZaiftEbHS1C6RmtxIM4rmRkZF8Ps%2bgr1nyo72l8k3Mf7wbrWgavmn/mFL8a2Fqh19WKiegR9DGoPLo6KjEh/e6f1zXSEcSbOsTQG4dGAzytFzOYoEIg6QZk/r%2b%2bC26rQRfPn/cRZXyD4mSFJ/zMXOWSKn9RK6Lnxf%2bA2B9EQNyVotlAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"717\" alt=\"image\" data-srcset=\"/blog/assets/static/grad-boost.46f75e1.883942d94b7e0ac8abb2e731ecc2f76a.png 717w\" data-sizes=\"(max-width: 717px) 100vw, 717px\" data-src=\"/blog/assets/static/grad-boost.46f75e1.883942d94b7e0ac8abb2e731ecc2f76a.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/blog/assets/static/grad-boost.46f75e1.883942d94b7e0ac8abb2e731ecc2f76a.png\" width=\"717\" alt=\"image\"></noscript></p>\n<h3 id=\"applications-of-gradient-boosting\"><a href=\"#applications-of-gradient-boosting\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Applications of Gradient Boosting</h3>\n<p>Let us derive some algorithms for common tasks such as regression and\nclassification using the Gradient Boosting methodology that is presented\nin the previous section.</p>\n<h3 id=\"least-squares-regression\"><a href=\"#least-squares-regression\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Least Squares Regression</h3>\n<p>We define the loss function for least squares regression as\n$L(y, F) = \\frac{(y-F)^2}{2}$, the squared error. Pseudo-responses are\nderivative of this loss function. So, $\\widetilde{y}$ is simply $y - F$.\nOur initials guess will be $F_0(\\mathbf{x}) = \\bar{y}$, namely the mean\nof the target values, because squared error is minimized at the mean.\nWith these, we can build our least squares regression with Gradient\nBoosting algorithm.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 715 261' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-0047a96c60bf63012a450e6d856e00e2'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-0047a96c60bf63012a450e6d856e00e2)' width='715' height='261' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAXCAIAAAA0gN7GAAAACXBIWXMAAAsSAAALEgHS3X78AAADi0lEQVRYw9XYa08aURAGYP//L/GD3zQxxrvReEet90sVtFxUqNoKCFTsw06zEkzsJyidxJOzs4fd9515Z85ZR5rN5rfECoVCqVTK5/M3NzfG29vbfGJuZbPZWMCur69zuVyhy7oXWB9jTHJ9s6urq2q1%2bvb2NuJveXl5fn4%2bk8ns7OxsbGzMzs66XFpaKhaLi4uLx8fHwF1cXFxeXu7v75fL5c3NzbOzMx7jyclJpVJZXV1162tilh0eHp6enpq3Wq1ffbN2u90hIAPb29szMzNjY2MLCwtbW1vwwT0%2bPn50dAQZNOha4xaqyBwcHMzNzaG6vr7OD%2bve3p7J1NRUJrGVlZV4jjSW%2b2P39/eNRqND4OXlxZuAEM5sYiZeLK6APj8/y5eg3t3d/Uzs4eHh6enpR5c9Pj6mnpjESpPvfTPw3glEtChHXCcnJ4VZGVhxfn4eUiEtKK2OrA2VdWpAwQlYvV6XF4pqJIbY6%2burSSux0BxPe2jsnQCVE7FilQdMKIxmJGE4Q96bAdHVPem1VqtRfCB2aS7qnDwo6Vnm6P2VVXd4BkEAMt1jenqakPRETUYFAxo7wMTEhPJVJBKi7YyOjiL2kUN6OfiMdSRE7mCRuw5jVAZwhOj5MSF9yxSJyo4ikbcoFc5aYil6jSgqfnAEgACLkFSCdytlu5J9NJwqxKhz2ddsC7Jk4lKijOjpvGoGes9BTO/qqZ%2b%2bpuVPBuLdghdekwiq2POTmbGemDlibhnVRpqK2B05jf9AQgE3kHVbM7E0ijHGDiItdjoM/RyNWB91H5ehQ7EgvEFISDhpwymAeEg/lOPdnOqYrmxnNGaMnTsOf8qGx26NhnkcPdbW1jQAYnO%2bMKaJ7a%2bEcDACAa42CjrQIRtrQkjQOBdZYI5AnDVcRtXGaUJ%2b1AaPNZ4WuR2QhGDtlkqqonQuS0o2FkMpzEHvkzLtd2PtEIhNSrR2d3dFThuhCrEEN4QuzGjQEqmIN79l0PMTVRyqPcSv3NKd0joewKY2EpWnFiEADiwjnURaGCFx0jFkZBPaQE8q9FAM%2ba0nOc0UeYEYaBcSWsd6e63NON7dHbP/4Cwk/PFJKYo9bfTj6a%2bH2%2bfnxMFlwMZJ6ATwJTFicDKlDVryMYDbUGdAG1GIJORT0HcwOfmWJW4cdHR8TFRCdchM/4jtsnOcVqbxlVlJrJRYMTEFGv%2bqGDajmujmvwEiynmn7%2ba17gAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"715\" alt=\"image\" data-srcset=\"/blog/assets/static/grad-boost-regression.b81fcc2.942b45240e54b5d3e2150ea442b4fbcd.png 715w\" data-sizes=\"(max-width: 715px) 100vw, 715px\" data-src=\"/blog/assets/static/grad-boost-regression.b81fcc2.942b45240e54b5d3e2150ea442b4fbcd.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/blog/assets/static/grad-boost-regression.b81fcc2.942b45240e54b5d3e2150ea442b4fbcd.png\" width=\"715\" alt=\"image\"></noscript></p>\n<h3 id=\"binary-classification\"><a href=\"#binary-classification\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Binary Classification</h3>\n<p>In the case of binary classification, we have negative binomial\nlog-likelihood as the loss function:</p>\n<p>$$\nL(y, F) = - (y \\log p + (1-y) \\log (1-p))\n$$</p>\n<p>where $y \\in { -1, 1 }$. $p$ is related to $F$ through:</p>\n<p>$$p(y = 1 | \\mathbf{x}) = \\frac{1}{1 + e^{-F(\\mathbf{x})}}$$</p>\n<p>Pulling out $F$ from this equation, we find:</p>\n<p>$$F(\\mathbf{x}) = \\frac{1}{2} \\log \\left[ \\frac{P(y = 1 | \\mathbf{x})}{P(y = -1 | \\mathbf{x})} \\right]$$</p>\n<p>With some algebraic manipulation, we can write the same loss function\nusing only $y$ and $F$:</p>\n<p>$$L(y, F) = \\log( 1 + \\exp(-2yF) )$$</p>\n<p>Taking derivative with respect to $F$, we find the pseudo-response:</p>\n<p>$$\\widetilde{y_i} = - \\left[  \\frac{\\partial{L(y_i, F(\\mathbf{x}_i))}}{F(\\mathbf{x}_i)}  \\right]_{F(\\mathbf{x}) = F_{m-1}(\\mathbf{x}_i)}\n= \\frac{2y_i}{1 + \\exp(2y_iF_{m-1}(\\mathbf{x}_i))} \\tag{17}$$</p>\n<p>where $i = 1, 2, \\dots, N$</p>\n<p>We will use regression trees as our base learners to learn a mapping to\nthese pseudo-responses. After building the regression tree, predictions\nin the leaves, $R_{jm}$, is the solution of this objectve:</p>\n<p>$$\\gamma_{jm} = \\underset{\\gamma}\n{\\operatorname{argmin}} \\sum \\limits_{ \\mathbf{x} \\in R_{jm} } \\log \\left(  1 + \\exp(-2y_i(F_{m-1}(\\mathbf{x}) + \\gamma))  \\right) \\tag{18}$$</p>\n<p>We can't directly solve this equation. Instead, we will estimate it with\na single Newton-Raphson step. For that, we need to find the first and\nsecond derivative of:</p>\n<p>$$H(\\gamma; R_{jm}) =  \\sum \\limits_{ \\mathbf{x} \\in R_{jm} } \\log \\left(  1 + \\exp(-2y_i(F_{m-1}(\\mathbf{x}) + \\gamma) \\right)) \\tag{19}$$</p>\n<p>1-step Newton-Raphson approximation of gamma with initial value 0 is:</p>\n<p>$$\\begin{aligned}\n\\gamma &#x26;= \\gamma_0 - \\frac{H^\\prime(\\gamma_0)}{H^{\\prime\\prime}(\\gamma_0)} \\\\\\\n&#x26;= 0 - \\frac{H^\\prime(0)}{H^{\\prime\\prime}(0)} \\\\\\\n&#x26;= - \\frac{H^\\prime(0)}{H^{\\prime\\prime}(0)}\n\\end{aligned}$$</p>\n<p>First derivative of $H$ is:</p>\n<p>$$H^\\prime(\\gamma) = \\sum \\limits_{ \\mathbf{x} \\in R_{jm} }  \\frac{-2y_i}{1 + \\exp(2y_i(F_{m-1}(\\mathbf{x}_i) + \\gamma))} \\tag{20}$$</p>\n<p>And at $\\gamma = 0$:</p>\n<p>$$\\begin{aligned}\nH^\\prime(0) &#x26;= \\sum \\limits_{ \\mathbf{x} \\in R_{jm} }  \\frac{-2y_i}{1 + \\exp(2y_iF_{m-1}(\\mathbf{x}_i))}\n\\end{aligned}$$</p>\n<p>We can see this equation is equal to negative of $\\widetilde{y}$ (see\nequation (17)). So:</p>\n<p>$$H^\\prime(\\gamma) = -\\sum \\limits_{ \\mathbf{x} \\in R_{jm} }  \\widetilde{y_i} \\tag{21}$$</p>\n<p>Second derivative of $H$ can be found by taking derivative of (19) with\nrespect to $\\gamma$ again:</p>\n<p>$$\\begin{aligned}\nH^{\\prime\\prime}(\\gamma) &#x26;= \\sum \\limits_{ \\mathbf{x} \\in R_{jm} } \\frac{d}{d\\gamma} H^\\prime(\\gamma) \\\\\\\n&#x26;= \\sum \\limits_{ \\mathbf{x} \\in R_{jm} } \\frac{\n(-2y_i)  2y_i  \\exp({2y_iF_{m-1}(\\mathbf{x})})\n}{<br>\n\\left( 1 + \\exp({ 2y_i (F_{m-1}(\\mathbf{x}) + \\gamma) }) \\right)^2\n} \\\\\\\n&#x26;= \\sum \\limits_{ \\mathbf{x} \\in R_{jm} }  - \\widetilde{y} \\ . \\ \\widetilde{y} \\ . \\ exp(2y_iF_{m-1}(\\mathbf{x})) \\\\\\\n&#x26;= \\sum \\limits_{ \\mathbf{x} \\in R_{jm} }  - \\widetilde{y} \\ . \\ \\widetilde{y} \\ . \\ \\frac{(2y - \\widetilde{y})}{\\widetilde{y}} \\\\\\\n&#x26;= \\sum \\limits_{ \\mathbf{x} \\in R_{jm} }  \\widetilde{y} (\\widetilde{y} - 2y)\n\\end{aligned}$$</p>\n<p>We can simplify this a little bit further. We can see that, from the\nequation (17), $y$ and $\\widetilde{y}$ always has the same sign. So, the\nproduct $y \\ . \\ \\widetilde{y}$ equals to $| \\widetilde{y} |$.</p>\n<p>Therefore, the second derivative equals to:</p>\n<p>$$H^{\\prime\\prime}(\\gamma) = \\sum \\limits_{ \\mathbf{x} \\in R_{jm} }  |\\widetilde{y}| \\  (|\\widetilde{y}| - 2) \\tag{22}$$</p>\n<p>Being calculated the first and second derivatives, we can find our\n1-step Newton-Raphson approximation of $\\gamma$:</p>\n<p>$$\\begin{aligned}\n\\gamma_{jm} &#x26;= - \\frac{H^\\prime(0)}{H^{\\prime\\prime}(0)} \\\\\\\n&#x26;=  -\\frac{ \\displaystyle{\n\\sum \\limits_{ \\mathbf{x} \\in R_{jm} }  \\widetilde{y}\n} }\n{\n\\displaystyle{\n\\sum \\limits_{ \\mathbf{x} \\in R_{jm} }  |\\widetilde{y}| \\  (|\\widetilde{y}| - 2)\n}\n} \\\\\\\n\\end{aligned} $$</p>\n<p>$$\n\\gamma_{jm}     =     \\frac{ \\displaystyle{\n\\sum \\limits_{ \\mathbf{x} \\in R_{jm} }  \\widetilde{y}\n} }\n{\n\\displaystyle{\n\\sum \\limits_{ \\mathbf{x} \\in R_{jm} }  |\\widetilde{y}| \\  (2 - |\\widetilde{y}|)\n}\n}  \\tag{23}\n$$</p>\n<p>By using (23), we can label the leaves of the decision tree that was\nbuilt in mth iteration.</p>\n<p>Finally, we must derive an initial prediction, $F_0(\\mathbf{x})$. One\ncan easily show that the negative binomial log-likelihood is minimized\nat:</p>\n<p>$$F_0(\\mathbf{x}) = \\frac{1}{2} \\log \\left(\\frac{ \\displaystyle{\n\\sum \\limits_{i=1}^N 1(y_i=1)\n} }{\n\\displaystyle{\n\\sum \\limits_{i=1}^N 1(y_i=-1)\n}\n}\n\\right) \\tag{24}$$</p>\n<p>Notice that we used $\\frac{1}{N} \\sum \\limits_{i=1}^N 1(y_i=1)$ as an\nestimate for $P(y = 1 | \\mathbf{x})$. Similarly\n$\\frac{1}{N} \\sum \\limits_{i=1}^N 1(y_i=-1)$ is an estimate for\n$P(y = -1 | \\mathbf{x})$. By using these estimates, we came up with\n(24).</p>\n<p>Note that the $F_0$ is refers to a constant value that minimizes cost</p>\n<p>Equation above becames a lot clear if we used\n$\\bar{y} = \\frac{1}{N} \\sum \\limits_{i=1}^N y_i$:</p>\n<p>$$F_0(\\mathbf{x}) = \\frac{1}{2} \\log \\frac{1+\\bar{y}}{1-\\bar{y}} \\tag{25}$$</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 714 380' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-4859a7c545ea05a25ac4bbabba611977'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-4859a7c545ea05a25ac4bbabba611977)' width='714' height='380' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAiCAIAAABgN0jYAAAACXBIWXMAAAsSAAALEgHS3X78AAAFBUlEQVRYw83YaU8bSRAGYP//v5GvkfYLEiAhYsCAkhDCYa5AOAJkAwESYIGEcx/mZSeOTVhvJHtdklvV5Z7pOt6q6p7K7e3t94K%2bFfT9H8JfXFycn59nzL8XBZ2dnV00kMXlmjDo8vIyf%2bUNofIlTS8MEf7VNp2ennr87u6u4jc1NTU0NPTq1av5%2bfnXr1%2bPjo4ODw/Pzc0tLi4Sjo2NLSwsVKtVknfv3tXr9c3NTY%2bQr6ysWDM%2bPj47O7u2tvbmzRvT9%2b/fWzMwMGC9v0wnJia8YXV1dXJyMq/1oF2sJ5wriHB9ff3Tp09/tkcfP348Pj5%2bMMB%2btHn27Nng4KAta7Uaxgb4w8PDra2tnZ2d2DYzMzM9Pb23t%2bcVtqQ3JahFv%2bXlZXxU%2bfLli3dubGx41f7%2bPrMpSsIdRss%2bfPiQ9Ra/ffvW41aSUAYi7v4LVTywWNDS0pItd3d3twqyB/0wHMOLxu3tbULux5drtgvCmJaMNWyO5fisLBej8tlSaBk719smAT84OHiIAMf8UVBfX9/IyMjz58%2b5%2beTkBE6811LuYdhvuKcLdG9A8lJOCDdgJYllSUZCgOPLm5ubjqrye965NwC%2bQWimoKOjI6H5%2bvUrx5vCNN8LGT5Z34sR4GmF6fPnz7SnpQrI8dJUWIzkpsBqWY8aIAIymJYMYIl6LJqwZKp6AJgIJBcFxPRXoW/CQHcS5sGA/v5%2byKElfwM935viX7x4gWEGICne%2boMaGuV6JKHvDbi6ugIbCqn64ZsWXV9fC1EaR6PeaaWBnLix3OP5C94U307n/Y8qhNTNly9fghAf60S21xborTxrNEqtvkNOy3RNiGKSaWKllutEXMAexoCfiLG8DFeHIlaJI20ZJtuYUotOlNDeqSubkyHWgBNha0Aa0d8F3/9kgAjwFqw7U9DSVARo7N8c3VQhlVSSYETGyCo5vVkQx4ubx3VApuK1Diiy0r/G9NoSYB0xgM90K5rxuu3pZzRlD3QxJkcgaOF%2bCokDob/I5YCIRW69NpKmgYkwTwVRHYRQ8JARlJtgELnISAba5BzeNai0a0Brtt02kClnw0n0xpi2rrltIcIOmfp4BFptuCkIDypOqUoTHn7aVKtzTaO5CpWbgUcjZCMEZbVS41NY4/tHFb0uyBuamkYngvBgQC6TSrt6ksuOfA1Pjne2U0YkLoluILnxInBcEIYLcoJKTzAyUpZT2svVH5Z34jT1owrxFj3kru0VFsUk5%2brg3lmDPfyqsGhkaquiCU40o6uYSOuco9LLMQwzJhS5BHcpBx4FBnUpxJ18nNyVBullJK4%2b/9eN59%2bTGO%2b84OJLb%2b5s/PdXSd9a0LqUxI19oGTgSmvL7bbxuPa0fo0ltdt94FdLqd4UGVnxtIO7gKifDJCIUJ4PUimCAX3qKQPKz16R68qlVTnPJmW9UGbL6ci7YUBuklCuSioptVotpxfkDEdX%2bSpNlUJnpFw%2bTYGK5bmsObFpcLJZhVVnncwBDw97HTcg3/TS7e2dnhDXIgztUxmNpulHbFNP86GPSfmrMUMERJ3t9E26UmLjicP9o8LEodMIacsAGKjX69VqNUnJwUF/mzepJzK4G0lsD603nzjjzjZ37ZF7/X0E4N7ZAaaVeWnnmCDzylNQ8H3Xq3RvAPePFJQP61JTVXGdzxdz6MpJ6abHKPGvpKLvFsTxxnxJzkfpfGre6D2iW75O/w1Tw4LeP4jzxQAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"714\" alt=\"image\" data-srcset=\"/blog/assets/static/grad-boost-classification.41d2f2b.9be9d62c47f8956ee88af42b0b9bb3a6.png 714w\" data-sizes=\"(max-width: 714px) 100vw, 714px\" data-src=\"/blog/assets/static/grad-boost-classification.41d2f2b.9be9d62c47f8956ee88af42b0b9bb3a6.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/blog/assets/static/grad-boost-classification.41d2f2b.9be9d62c47f8956ee88af42b0b9bb3a6.png\" width=\"714\" alt=\"image\"></noscript></p>\n<p>Following the same logic, any learning task with any differentiable loss\nfunction $L$ and base learner $h$, can be done with Gradient Boosting\nalgorithm presented in Algorithm 5.</p>\n<h3 id=\"regularization\"><a href=\"#regularization\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Regularization</h3>\n<p>Usually, we don't want our learning algorithm to \\\"overlearn\\\" our\ntraining set. Instead, we want them to generalize and have high\nperformance on unseen data as well as training data. If a learning\nalgorithm performs almost perfect on training data but perform poorly on\na separate validation set, then that algorithm is said to be overfit.\nThere are techniques to overcome this problem of overfitting. They are\ncalled regularization techniques. Regularization techniques differs from\nalgorithm to algorithm.</p>\n<p>For example, in gradient descent, we regularize our model by tuning the\nlearning rate parameter or number of iterations. Learning rate is the\nshrinkage parameter applied on the gradients of the cost function.</p>\n<p>In Gradient Boosting, we train $M$ base learner to learn a mapping to\ngradients. Then update our model with these gradients. So, one natural\nregularization technique is tuning the $M$ parameter. Other one is\nbringing a new learning rate parameter $\\nu$, to the model. We can\nmodify our model update equation with this learning rate parameter as\nthe following:</p>\n<p>$F_m(\\mathbf{x}) = F_{m-1}(x) + \\nu \\ . \\ \\rho_m h(\\mathbf{x}_i; \\mathbf{a}_m)$</p>\n<p>By using a learning rate, we reduce the influence of a single base\nlearner to leave some room for other base learners to improve the model.</p>\n<p>There are other effective regularization techniques that are used by\npopular Gradient Boosting libraries such as XGBoost, LightGBM, Catboost,\netc. Popular ones includes maximum features to use at each iteration\n(this is similar to Random Forest), subsampling the training set at each\niteration and maximum depth of each tree, etc.</p>\n<p>In the next section, we will discuss these popular algorithms that uses\nthe Gradient Boosting concept.</p>\n<h2 id=\"xgboost\"><a href=\"#xgboost\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>XGBoost</h2>\n<p>In recent years, several Gradient Boosting algorithms has been\ndeveloped. With these algorithms, Gradient Boosting became much more\nscalable and computationally efficient. In Gradient Boosted Decision\nTrees, most computationally expensive part is the tree building process.\nFor each non-terminal node, a split criterion must be found by looking\nat all possible splits of each feature. This process is really slows\ndown the training of Gradient Boosted Decision Trees. If we have lots of\nfeatures and lots of data, even one step of Gradient Boosting takes an\nunreasonable amount of time. Recently developed algorithms address this\nproblem and gives efficient solutions.</p>\n<p>One popular Gradient Boosting franework is XGBoost. It was initially\ndeveloped in 2014. It uses a modified cost function that has an\nadditional regularization term which penalizes the complexity of the\ntrees. Besides that, it addresses computational problems that arise when\nusing Gradient Boosting in large data sets by proposing several\nsolutions.</p>\n<h3 id=\"regularized-cost-function\"><a href=\"#regularized-cost-function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Regularized Cost Function</h3>\n<p>As we seen on the previous chapter, given a loss function, $L$, we\ndefine our objective (cost function) as:</p>\n<p>$$\\sum \\limits_{i=1}^N L(y_i, F_{m}(\\mathbf{x}_i))$$</p>\n<p>XGBoost proposes a modified version of this objective that takes\nregularization into account:</p>\n<p>$$\\mathcal{L} = \\sum \\limits_{i=1}^N L(y_i, F_{M}(\\mathbf{x}_i)) + \\sum \\limits_{k = 1}^M \\Omega (f_k) \\tag{26}$$</p>\n<p>where\n$\\Omega(f) = \\displaystyle{\\gamma T + \\frac{1}{2} \\lambda \\sum \\limits_{j=1}^T {w_j}^2}$.\n$T$ is the number of leaves in the tree $f$ and $w_j$ is the score in\njth leaf. $\\gamma$ and $\\lambda$ are regularization parameters.</p>\n<p>This objective minimizes the loss of the final model $F_M$ with $M$\ntrees. However, in practice, it's impossible to find $M$ trees in only\none step. We need a greedy approach that adds the trees in an iterative\nfashion. So, at iteration m, we need to solve the objective:</p>\n<p>$$\\mathcal{L}^{(m)} = \\sum \\limits_{i=1}^N L(y_i, F_{m-1}(\\mathbf{x}_i) + f_m(\\mathbf{x}_i)) + \\Omega (f_m) \\tag{27}$$</p>\n<p>Assuming that $L$ is a twice differentiable function, we approximate the\n$L$ function by second order Taylor polynomial.</p>\n<p>$$\\mathcal{L}^{(m)} = \\sum \\limits_{i=1}^N \\left[\nL(y_i, F_{m-1}(\\mathbf{x}_i)) + g(\\mathbf{x}_i)f_m(\\mathbf{x}_i) + \\frac{1}{2} h(\\mathbf{x}_i)f_m^2(\\mathbf{x}_i)\n\\right]  + \\Omega (f_m) \\tag{28}$$</p>\n<p>where $$g(\\mathbf{x}) =\n\\frac{\n\\partial L(y_i, F_{m-1}(\\mathbf{x}))\n}{\n\\partial F_{m-1}(\\mathbf{x})\n}$$ and</p>\n<p>$$h(\\mathbf{x}) =\n\\frac{\n\\partial {L(y_i, F_{m-1}(\\mathbf{x}))}^2\n}{\n\\partial^2 F_{m-1}(\\mathbf{x})\n}$$</p>\n<p>This equation can be simplified by removing the constant terms.</p>\n<p>$$\\mathcal{\\tilde{L}}^{(m)} = \\sum \\limits_{i=1}^N \\left[\ng(\\mathbf{x}_i)f_m(\\mathbf{x}_i) + \\frac{1}{2} h(\\mathbf{x}_i)f_m^2(\\mathbf{x}_i)\n\\right]  + \\Omega (f_m)$$</p>\n<p>$$\\mathcal{\\tilde{L}}^{(m)} = \\sum \\limits_{i=1}^N \\left[\ng(\\mathbf{x}_i)f_m(\\mathbf{x}_i) + \\frac{1}{2} h(\\mathbf{x}_i)f_m^2(\\mathbf{x}_i)\n\\right]  + \\gamma T + \\frac{1}{2} \\lambda \\sum \\limits_{j=1}^T {w_j}^2$$</p>\n<p>To simplify this equation further, we can group the summations to be\nbased on the points in the same leaf. Recall that we can define the\n$f_m$ as:</p>\n<p>$$f_m(\\mathbf{x}) = \\sum \\limits_{j=1}^T w_j 1(\\mathbf{x} \\in R_j)$$</p>\n<p>Using that definition of $f_t$, we can simplify our objective:</p>\n<p>$$\\begin{aligned}\n\\mathcal{\\tilde{L}}^{(m)}\n&#x26;= \\sum \\limits_{j=1}^T\n\\left[\n\\sum \\limits_{\\mathbf{x}_i \\in R_j}\ng(\\mathbf{x}_i)w_j + \\frac{1}{2}\\sum \\limits_{\\mathbf{x}_i \\in R_j}  h(\\mathbf{x}_i)w_j^2\n\\right]  + \\gamma T + \\frac{1}{2} \\lambda   \\sum \\limits_{j=1}^T  {w_j}^2 \\\\\\\n&#x26;= \\sum \\limits_{j=1}^T\n\\left[\n\\sum \\limits_{\\mathbf{x}_i \\in R_j}\ng(\\mathbf{x}_i)w_j + \\frac{1}{2}\n\\left( \\sum \\limits_{\\mathbf{x}_i \\in R_j}   h(\\mathbf{x}_i) + \\lambda \\right) w_j^2\n\\right]  + \\gamma T\n\\end{aligned}$$</p>\n<p>We need to find $w_j$'s that need minimize this equation. Taking\nderivative with respect to $w_j$, we can find the optimum $w_j$:</p>\n<p>$$w_j^* = - \\frac{\n\\displaystyle{\n\\sum \\limits_{\\mathbf{x}_i \\in R_j}\ng(\\mathbf{x}_i)\n}\n}{\n\\displaystyle{\n\\sum \\limits_{\\mathbf{x}_i \\in R_j}   h(\\mathbf{x}_i) + \\lambda\n}\n} \\tag{29}$$</p>\n<p>Using these $w_j$'s, we can find the optimum cost value:</p>\n<p>$$\\mathcal{\\tilde{L}}^{(m)^*}  = -\\frac{1}{2} \\sum \\limits_{j=1}^T\n\\frac{\n\\displaystyle{\n\\left(\n\\sum \\limits_{\\mathbf{x}_i \\in R_j}\ng(\\mathbf{x}_i)\n\\right)^2\n}\n}{\n\\displaystyle{\n\\sum \\limits_{\\mathbf{x}_i \\in R_j}   h(\\mathbf{x}_i) + \\lambda\n}\n}  + \\gamma T \\tag{30}$$</p>\n<p>We can use this equation as a scoring function when deciding on split\ncriteria. As discussed in Decision Trees chapter, when we looking for\nthe best split across all feature space, we choose the feature and the\nsplit point that gives the most reduction in our impurity. Likewise,\nXGBoost chooses the split crtierion that results in most reduction in\nthe cost (28).</p>\n<p>If a region $R$ is splitted into two regions $R_L$ and $R_R$, then the\nreduction in the cost after the split is given by:</p>\n<p>$$\\mathcal{\\tilde{L}}^{(m)^*} = \\frac{1}{2} \\left[\n\\frac{\n(\n\\sum \\limits_{\\mathbf{x}_i \\in R_L}\ng(\\mathbf{x}_i)\n)^2\n}{\n\\sum \\limits_{\\mathbf{x}_i \\in R_L}   h(\\mathbf{x}_i) + \\lambda\n} +\n\\frac{\n(\n\\sum \\limits_{\\mathbf{x}_i \\in R_R}\ng(\\mathbf{x}_i)\n)^2\n}{\n\\sum \\limits_{\\mathbf{x}_i \\in R_R}   h(\\mathbf{x}_i) + \\lambda\n} -\n\\frac{\n(\n\\sum \\limits_{\\mathbf{x}_i \\in R}\ng(\\mathbf{x}_i)\n)^2\n}{\n\\sum \\limits_{\\mathbf{x}_i \\in R}   h(\\mathbf{x}_i) + \\lambda\n}<br>\n\\right] - \\gamma \\tag{31}$$</p>\n<h3 id=\"split-finding\"><a href=\"#split-finding\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Split Finding</h3>\n<p>As we discussed in the previous chapter, split finding is arguably the\nmost computationally expensive part of the Decision Tree algorithm. To\nfind the best split for a specific node, we need to iterate over all\nfeatures and sort their values, and search for the values that gives the\nbest split according to some impurity measure like gini index, cross\nentropy or cost reduction like (31). This algorithm is called the Exact\nGreedy Algorithm. In settings where we have millions or billions of data\npoints, this solution becomes infeasible.</p>\n<p>Instead, XGBoost proposes several algorithms for avoiding the\ndisadvantages of Exact Greedy Algorithm for split finding.</p>\n<h3 id=\"approximate-algorithm\"><a href=\"#approximate-algorithm\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Approximate Algorithm</h3>\n<p>Exact Greedy algorithm needs to enumerate over all values of a feature\nin one step and it needs to repeat that for all features. To avoid the\ncomputational cost of this process, XGBoost proposes an algorithm called\nApproximate Algorithm. What it does is, instead of looking at every\nvalue of a feature, it finds $l$ percentile of a feature, based on its\nvalues in the training set. Then, it iterates over these $l$ different\npercentiles to find the best possible split amongst these percentiles,\ninstead of looking at $N_k  \\approx N$ different values of a feature. As\nthe Exact Greedy algorithm, Approximate Algorithm does this step for\nevery features.</p>\n<h3 id=\"sparsity-aware-split-finding\"><a href=\"#sparsity-aware-split-finding\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sparsity-aware Split Finding</h3>\n<p>There can be a lot of sparse features in large data sets. This sparsity\nin the data slows down the split finding process. XGBoost proposes a\nSparsity-aware Split Finding algorithm. It gives a default direction\n(left or right) to which a way the missing values in the feature to go\nwhile splitting the node. It finds the best direction from the data by\nlooking at only the non-missing values and calculating the cost\nreduction in each direction.</p>\n<p>There are also low level optimizations XGBoost performs that speeds up\nthe tree learning process. Its paper explains them in detail.</p>\n"}}]}}},"context":{}}